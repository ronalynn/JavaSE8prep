package javase8.prep;

/**
 * Compare and contrast the features and components of Java such as:
 * platform independence, object orientation, encapsulation, etc.
 */
public class a5FeaturesAndComponents {
    /**
     * PLATFORM INDEPENDENCE:
     *  Slogan: WORA - Write once, run anywhere
     *  Can be executed on multiple systems without recompilation
     *  Compiled into bytecode to be executed by a virtual machine (JVM).
     *  JVM can be installe don platforms with different OSs like Windows, Max or Linux
     *  JVM interprets the bytecode into machine-specific instructions for execution.
     *  The implementation details of a JVM are machine-dependent and might different across platforms,
     *      but all of them interpre the same bytecode in a similar manner.
     *  Byecode generated by a Java compiler is supported by all platforms with a JVM.
     *
     *  Languages like C and C++ compile their code to a host system. So the code must be
     *      recompiled for separate platforms.
     *
     * OBJECT ORIENTATION
     *  Java imitates real-life object definition and behaviour.
     *  IRL, state and behavior are tied to an object.
     *  Likewise, all Java code is defined within classes, interfaces or enums.
     *  Objects in java are created to be used.
     *
     * ABSTRACTION:
     *  Java lets you abstract objects and include only the required properties
     *      and behaviour in your code.
     *
     * ENCAPSULATION:
     *  With Java classes, you can 'encapsulate' the state and behavior of an object.
     *  The state or the fields of a class are protected from unwanted access and manipulation.
     *  You can control the level of access and modifications to your objects.
     *  Encapsulation Defn: to make sure that "sensitive" data is hidden from users.
     *  To achieve this you must:
     *      Declare class variables/attributes as private
     *      Provide get and set methods to access and update the value of a private variable.
     *
     * INHERITANCE:
     *  Java enables its classes to inherit other classes and implement interfaces
     *  the interfaces can inherit other interfaces - stops duplication
     *
     * POLYMORPHISM
     *  literal meaning - many forms.
     *  Java enables instances of its classes to exhibit multiple behaviors for the same
     *      method calls.
     *
     * TYPE SAFETY
     *  In Java, you must declare a variable with its data type before you can use it.
     *  You have to compile-time checks that ensure you never assign to a variable to
     *      a value of the wrong type.
     */
}
